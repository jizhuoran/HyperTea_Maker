(6, 512, 512)

#include "hypertea/hypertea.hpp"

namespace hypertea {

class new_net {
public:

    new_net() {

        FILE *f = fopen("pytorch_weight", "rb");
        size_t read_size = fread(all_weights, 1, weight_size, f);
        if (read_size != weight_size) { 
            LOG(ERROR) << "Weight File Size Mismatch" << read_size << " and " << weight_size << std::endl;
        }
        fclose(f);
    }


    ~new_net() {
        free(all_weights);
    }

    
    
    void inference( std::vector<float> &data_from_user, std::vector<float> &data_to_user) {
        
        TensorCPU<float> data(data_from_user);

        auto temp = bn1(elu1(conv1(data)));
        temp = bn2(elu2(conv2(temp)));
        temp = bn3(elu3(conv3(temp)));


        temp += res1_bn2(res1_conv2(res1_bn1(res1_relu1(res1_bn1(res1_conv1(temp))))));
        temp += res2_bn2(res2_conv2(res2_bn1(res2_relu1(res2_bn1(res2_conv1(temp))))));
        temp += res3_bn2(res3_conv2(res3_bn1(res3_relu1(res3_bn1(res3_conv1(temp))))));
        temp += res4_bn2(res4_conv2(res4_bn1(res4_relu1(res4_bn1(res4_conv1(temp))))));
        temp += res5_bn2(res5_conv2(res5_bn1(res5_relu1(res5_bn1(res5_conv1(temp))))));


        temp = de_bn1(de_elu1(deconv1(temp)));
        temp = de_bn2(de_elu2(deconv2(temp)));
        temp = de_tanh3(deconv3(temp));

        temp = (temp + 1) * 127.5;

        hypertea_copy(data_to_user.size(), temp.data(), data_to_user.data());

    }


private:
    int weight_size = 7285260;
    unsigned char* all_weights = (unsigned char*) malloc(weight_size);
float* conv1_bias = reinterpret_cast<float*>(all_weights + 0);
float* conv1_weight = reinterpret_cast<float*>(all_weights + 128);
float* bn1_weight = reinterpret_cast<float*>(all_weights + 31232);
float* bn1_bias = reinterpret_cast<float*>(all_weights + 31360);
float* conv2_bias = reinterpret_cast<float*>(all_weights + 31488);
float* conv2_weight = reinterpret_cast<float*>(all_weights + 31744);
float* bn2_weight = reinterpret_cast<float*>(all_weights + 162816);
float* bn2_bias = reinterpret_cast<float*>(all_weights + 163072);
float* conv3_bias = reinterpret_cast<float*>(all_weights + 163328);
float* conv3_weight = reinterpret_cast<float*>(all_weights + 163840);
float* bn3_weight = reinterpret_cast<float*>(all_weights + 688128);
float* bn3_bias = reinterpret_cast<float*>(all_weights + 688640);
float* res1_conv1_weight = reinterpret_cast<float*>(all_weights + 689152);
float* res1_bn1_weight = reinterpret_cast<float*>(all_weights + 1278976);
float* res1_bn1_bias = reinterpret_cast<float*>(all_weights + 1279488);
float* res1_conv2_weight = reinterpret_cast<float*>(all_weights + 1280000);
float* res1_bn2_weight = reinterpret_cast<float*>(all_weights + 1869824);
float* res1_bn2_bias = reinterpret_cast<float*>(all_weights + 1870336);
float* res2_conv1_weight = reinterpret_cast<float*>(all_weights + 1870848);
float* res2_bn1_weight = reinterpret_cast<float*>(all_weights + 2460672);
float* res2_bn1_bias = reinterpret_cast<float*>(all_weights + 2461184);
float* res2_conv2_weight = reinterpret_cast<float*>(all_weights + 2461696);
float* res2_bn2_weight = reinterpret_cast<float*>(all_weights + 3051520);
float* res2_bn2_bias = reinterpret_cast<float*>(all_weights + 3052032);
float* res3_conv1_weight = reinterpret_cast<float*>(all_weights + 3052544);
float* res3_bn1_weight = reinterpret_cast<float*>(all_weights + 3642368);
float* res3_bn1_bias = reinterpret_cast<float*>(all_weights + 3642880);
float* res3_conv2_weight = reinterpret_cast<float*>(all_weights + 3643392);
float* res3_bn2_weight = reinterpret_cast<float*>(all_weights + 4233216);
float* res3_bn2_bias = reinterpret_cast<float*>(all_weights + 4233728);
float* res4_conv1_weight = reinterpret_cast<float*>(all_weights + 4234240);
float* res4_bn1_weight = reinterpret_cast<float*>(all_weights + 4824064);
float* res4_bn1_bias = reinterpret_cast<float*>(all_weights + 4824576);
float* res4_conv2_weight = reinterpret_cast<float*>(all_weights + 4825088);
float* res4_bn2_weight = reinterpret_cast<float*>(all_weights + 5414912);
float* res4_bn2_bias = reinterpret_cast<float*>(all_weights + 5415424);
float* res5_conv1_weight = reinterpret_cast<float*>(all_weights + 5415936);
float* res5_bn1_weight = reinterpret_cast<float*>(all_weights + 6005760);
float* res5_bn1_bias = reinterpret_cast<float*>(all_weights + 6006272);
float* res5_conv2_weight = reinterpret_cast<float*>(all_weights + 6006784);
float* res5_bn2_weight = reinterpret_cast<float*>(all_weights + 6596608);
float* res5_bn2_bias = reinterpret_cast<float*>(all_weights + 6597120);
float* deconv1_bias = reinterpret_cast<float*>(all_weights + 6597632);
float* deconv1_weight = reinterpret_cast<float*>(all_weights + 6597888);
float* de_bn1_weight = reinterpret_cast<float*>(all_weights + 7122176);
float* de_bn1_bias = reinterpret_cast<float*>(all_weights + 7122432);
float* deconv2_bias = reinterpret_cast<float*>(all_weights + 7122688);
float* deconv2_weight = reinterpret_cast<float*>(all_weights + 7122816);
float* de_bn2_weight = reinterpret_cast<float*>(all_weights + 7253888);
float* de_bn2_bias = reinterpret_cast<float*>(all_weights + 7254016);
float* deconv3_bias = reinterpret_cast<float*>(all_weights + 7254144);
float* deconv3_weight = reinterpret_cast<float*>(all_weights + 7254156);


ConvolutionOp_CPU<float> conv1 = ConvolutionOp_CPU<float> (conv1_weight, conv1_bias, 1, false, std::vector<int> {9,9}, std::vector<int> {1,1}, std::vector<int> {4,4}, std::vector<int> {1,1}, std::vector<int> {2,3,512,512}, std::vector<int> {2,32,512,512}, false);
ELUOp_CPU<float> elu1 = ELUOp_CPU<float> ( 1, NOT_IN_PLACE );
BatchNormOp_CPU<float> bn1 = BatchNormOp_CPU<float> (16777216, 2, 32, 1e-05, 1, false, NULL, NULL, bn1_weight, bn1_bias);
ConvolutionOp_CPU<float> conv2 = ConvolutionOp_CPU<float> (conv2_weight, conv2_bias, 1, false, std::vector<int> {4,4}, std::vector<int> {2,2}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,32,512,512}, std::vector<int> {2,64,256,256}, false);
ELUOp_CPU<float> elu2 = ELUOp_CPU<float> ( 1, NOT_IN_PLACE );
BatchNormOp_CPU<float> bn2 = BatchNormOp_CPU<float> (8388608, 2, 64, 1e-05, 1, false, NULL, NULL, bn2_weight, bn2_bias);
ConvolutionOp_CPU<float> conv3 = ConvolutionOp_CPU<float> (conv3_weight, conv3_bias, 1, false, std::vector<int> {4,4}, std::vector<int> {2,2}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,64,256,256}, std::vector<int> {2,128,128,128}, false);
ELUOp_CPU<float> elu3 = ELUOp_CPU<float> ( 1, NOT_IN_PLACE );
BatchNormOp_CPU<float> bn3 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, bn3_weight, bn3_bias);
ConvolutionOp_CPU<float> res1_conv1 = ConvolutionOp_CPU<float> (res1_conv1_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res1_bn1 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res1_bn1_weight, res1_bn1_bias);
ReLUOp_CPU<float> res1_relu1 = ReLUOp_CPU<float> ( 0, NOT_IN_PLACE );
ConvolutionOp_CPU<float> res1_conv2 = ConvolutionOp_CPU<float> (res1_conv2_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res1_bn2 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res1_bn2_weight, res1_bn2_bias);
ConvolutionOp_CPU<float> res2_conv1 = ConvolutionOp_CPU<float> (res2_conv1_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res2_bn1 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res2_bn1_weight, res2_bn1_bias);
ReLUOp_CPU<float> res2_relu1 = ReLUOp_CPU<float> ( 0, NOT_IN_PLACE );
ConvolutionOp_CPU<float> res2_conv2 = ConvolutionOp_CPU<float> (res2_conv2_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res2_bn2 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res2_bn2_weight, res2_bn2_bias);
ConvolutionOp_CPU<float> res3_conv1 = ConvolutionOp_CPU<float> (res3_conv1_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res3_bn1 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res3_bn1_weight, res3_bn1_bias);
ReLUOp_CPU<float> res3_relu1 = ReLUOp_CPU<float> ( 0, NOT_IN_PLACE );
ConvolutionOp_CPU<float> res3_conv2 = ConvolutionOp_CPU<float> (res3_conv2_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res3_bn2 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res3_bn2_weight, res3_bn2_bias);
ConvolutionOp_CPU<float> res4_conv1 = ConvolutionOp_CPU<float> (res4_conv1_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res4_bn1 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res4_bn1_weight, res4_bn1_bias);
ReLUOp_CPU<float> res4_relu1 = ReLUOp_CPU<float> ( 0, NOT_IN_PLACE );
ConvolutionOp_CPU<float> res4_conv2 = ConvolutionOp_CPU<float> (res4_conv2_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res4_bn2 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res4_bn2_weight, res4_bn2_bias);
ConvolutionOp_CPU<float> res5_conv1 = ConvolutionOp_CPU<float> (res5_conv1_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res5_bn1 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res5_bn1_weight, res5_bn1_bias);
ReLUOp_CPU<float> res5_relu1 = ReLUOp_CPU<float> ( 0, NOT_IN_PLACE );
ConvolutionOp_CPU<float> res5_conv2 = ConvolutionOp_CPU<float> (res5_conv2_weight, NULL, 1, false, std::vector<int> {3,3}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,128,128,128}, false);
BatchNormOp_CPU<float> res5_bn2 = BatchNormOp_CPU<float> (4194304, 2, 128, 1e-05, 1, false, NULL, NULL, res5_bn2_weight, res5_bn2_bias);
DeconvolutionOp_CPU<float> deconv1 = DeconvolutionOp_CPU<float> (deconv1_weight, deconv1_bias, 1, false, std::vector<int> {4,4}, std::vector<int> {2,2}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,128,128,128}, std::vector<int> {2,64,256,256}, false);
ELUOp_CPU<float> de_elu1 = ELUOp_CPU<float> ( 1, NOT_IN_PLACE );
BatchNormOp_CPU<float> de_bn1 = BatchNormOp_CPU<float> (8388608, 2, 64, 1e-05, 1, false, NULL, NULL, de_bn1_weight, de_bn1_bias);
DeconvolutionOp_CPU<float> deconv2 = DeconvolutionOp_CPU<float> (deconv2_weight, deconv2_bias, 1, false, std::vector<int> {4,4}, std::vector<int> {2,2}, std::vector<int> {1,1}, std::vector<int> {1,1}, std::vector<int> {2,64,256,256}, std::vector<int> {2,32,512,512}, false);
ELUOp_CPU<float> de_elu2 = ELUOp_CPU<float> ( 1, NOT_IN_PLACE );
BatchNormOp_CPU<float> de_bn2 = BatchNormOp_CPU<float> (16777216, 2, 32, 1e-05, 1, false, NULL, NULL, de_bn2_weight, de_bn2_bias);
DeconvolutionOp_CPU<float> deconv3 = DeconvolutionOp_CPU<float> (deconv3_weight, deconv3_bias, 1, false, std::vector<int> {9,9}, std::vector<int> {1,1}, std::vector<int> {4,4}, std::vector<int> {1,1}, std::vector<int> {2,32,512,512}, std::vector<int> {2,3,512,512}, false);
TanHOp_CPU<float> de_tanh3 = TanHOp_CPU<float> ( NOT_IN_PLACE );

};
} //namespace hypertea
        
